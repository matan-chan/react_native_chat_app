"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var nanoid_1 = require("nanoid");
var styles_1 = require("./styles");
var detect_touch_events_1 = __importDefault(require("detect-touch-events"));
var ReactThreeToggle = react_1.forwardRef(function (_a, ref) {
    var _b = _a.className, _c = _b === void 0 ? {
        selectedClassName: undefined,
        wrapperClassName: undefined,
    } : _b, selectedClassName = _c.selectedClassName, wrapperClassName = _c.wrapperClassName, _d = _a.height, height = _d === void 0 ? 16 : _d, initialValue = _a.initialValue, isVertical = _a.isVertical, isWrap = _a.isWrap, name = _a.name, onChange = _a.onChange, _e = _a.style, _f = _e === void 0 ? {
        selectedStyle: undefined,
        wrapperStyle: undefined,
    } : _e, selectedStyle = _f.selectedStyle, wrapperStyle = _f.wrapperStyle, values = _a.values, _g = _a.width, width = _g === void 0 ? 48 : _g;
    var uniqueValues = react_1.useMemo(function () {
        return values.map(function (v) {
            return typeof v === "string"
                ? {
                    id: nanoid_1.nanoid(),
                    label: null,
                    value: v,
                }
                : __assign(__assign({}, v), { id: nanoid_1.nanoid() });
        });
    }, [values]);
    var _h = react_1.useState(function () {
        if (typeof initialValue === "undefined") {
            return 0;
        }
        return uniqueValues.findIndex(function (_a) {
            var value = _a.value;
            return initialValue === value;
        }) || 0;
    }), currentIndex = _h[0], setCurrentIndex = _h[1];
    var currentLabel = react_1.useMemo(function () {
        var label = uniqueValues[currentIndex].label;
        return label;
    }, [currentIndex, uniqueValues]);
    var currentValue = react_1.useMemo(function () {
        var value = uniqueValues[currentIndex].value;
        return value;
    }, [currentIndex, uniqueValues]);
    var options = react_1.useMemo(function () {
        return uniqueValues.map(function (_a) {
            var id = _a.id, value = _a.value;
            return react_1.default.createElement("option", { key: id, value: value });
        });
    }, [uniqueValues]);
    var handleChange = react_1.useCallback(function () { }, []);
    var _j = react_1.useState(false), enabledTouch = _j[0], setEnabledTouch = _j[1];
    var _k = react_1.useState(false), wrap = _k[0], setWrap = _k[1];
    var _l = react_1.useState(false), enabledOnChange = _l[0], setEnabledOnChange = _l[1];
    var callback = react_1.useCallback(function () {
        setEnabledOnChange(true);
        setCurrentIndex(function (prevIndex) {
            if (isWrap) {
                return wrap ? prevIndex - 1 : prevIndex + 1;
            }
            var nextIndex = prevIndex + 1;
            return nextIndex === uniqueValues.length ? 0 : nextIndex;
        });
    }, [isWrap, uniqueValues.length, wrap]);
    var handleClick = react_1.useCallback(function () {
        if (enabledTouch) {
            return;
        }
        callback();
    }, [callback, enabledTouch]);
    var handleTouchStart = react_1.useCallback(function () {
        if (!enabledTouch) {
            return;
        }
        callback();
    }, [callback, enabledTouch]);
    var length = react_1.useMemo(function () { return uniqueValues.length; }, [uniqueValues.length]);
    react_1.useEffect(function () {
        var hasSupport = detect_touch_events_1.default.hasSupport;
        setEnabledTouch(!!hasSupport);
    }, []);
    react_1.useEffect(function () {
        if (currentIndex !== 0 && currentIndex !== uniqueValues.length - 1) {
            return;
        }
        setWrap(currentIndex === uniqueValues.length - 1);
    }, [currentIndex, uniqueValues.length]);
    react_1.useEffect(function () {
        var index = values.findIndex(function (value) { return initialValue === value; });
        if (index < 0) {
            return;
        }
        setCurrentIndex(index);
    }, [initialValue, values]);
    react_1.useEffect(function () {
        if (!enabledOnChange || !onChange) {
            return;
        }
        var currentValue = values[currentIndex];
        onChange(currentValue);
    }, [currentIndex, enabledOnChange, onChange, values]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(styles_1.Wrapper, { className: wrapperClassName, height: height, onClick: handleClick, onTouchStart: handleTouchStart, style: wrapperStyle, width: width },
            react_1.default.createElement(styles_1.Inner, null,
                react_1.default.createElement(styles_1.Selected, { className: selectedClassName, height: height, index: currentIndex, isVertical: isVertical, length: length, style: selectedStyle, width: width }, currentLabel))),
        react_1.default.createElement(styles_1.Select, { name: name, onChange: handleChange, ref: ref, value: currentValue }, options)));
});
exports.default = ReactThreeToggle;
//# sourceMappingURL=index.js.map